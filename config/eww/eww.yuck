(deflisten workspaces :initial "[]" "~/.config/eww/scripts/get-workspaces.sh")
(deflisten current_workspace :initial "1" "~/.config/eww/scripts/get-active-workspace.sh")
(deflisten active_window :initial "1" "~/.config/eww/scripts/get-active-window.sh")
(defpoll mail-important :initial "0" :interval "10s" "notmuch count tag:important")
(defpoll mail-unread :initial "0" :interval "10s" "notmuch count tag:unread")
(deflisten notifications :initial `{ "text": "0", "alt": "none", "tooltip": "", "class": "none" }` "swaync-client -swb")
(defpoll sound :initial `{"volume": 100, "icon": "./assets/volume.png"}` :interval "1s" "~/.config/eww/scripts/get-sound.sh")

(defpoll tvStatus :initial `off` :interval "1s" "~/.config/eww/scripts/tv-status.sh")

(defvar calEntry 0)
(defpoll cal :initial `{ "a": "", "b": "Loading...", "f": "", "g": "" }` :interval "5s" "~/.config/eww/scripts/get-next-calendar-entry.sh")

(defwidget workspaces []
  (eventbox :onscroll "~/.config/eww/scripts/change-active-workspace.sh {} ${current_workspace}" :class "workspaces-widget"
    (box :space-evenly true
	 :class "box"
      (label :text "${workspaces}${current_workspace}" :visible false)

      (for workspace in workspaces
        (eventbox :onclick "sleep 0.1; hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${workspace.id}" :class "workspace-label" :width 3)
            )))
      )
    )
  )

(defwidget active-window []
	   (box
	    :halign "center"
	    :hexpand false
	    :class "active-window box"
	    (button
	       :onclick "sleep 0.1; hyprctl dispatch hycov:toggleoverview"
	      (label
	       :width 150
	       :limit-width 15
	       :halign "start"
	       :show-truncated false
	       :text `${replace(replace(active_window, '"', ''), 'org.qutebrowser.', '')}`))))

(defwidget monitor [monitor-text monitor-icon monitor-width ?monitor-class ?monitor-click ?monitor-rclick]
	   (button
	    :onclick monitor-click
	    :onrightclick monitor-click
	    (box
	     :class "monitor ${monitor-class}"
	     :halign "start"
	     :hexpand false
	     :space-evenly false
	     (image
	      :path monitor-icon
	      :class "monitor-image"
	      :image-width 20
	      :image-height 20)
	     (label
	      :xalign 0
	      :text monitor-text
	      :limit-width monitor-width
	      :show-truncated false
	      :width "${monitor-text == "" ? 0 : monitor-width * 10}"
	      ))))

(defwidget audio []
	   (box
	    :class "audio-box box"
	    :halign "start"
	    :orientation "horizontal"
	    :space-evenly false
	    (button
	     :class "audio-button"
	     :onclick "sleep 0.1; amixer set Master toggle"
	     (image
	      :path "${sound.sicon}"
	      :image-width 20
	      :image-height 20))
	    (scale
	     :class "audio-scale"
	     :hexpand true
	     :width 80
	     :value "${sound.svolume}"
	     :tooltip "${sound.svolume}"
	     :min 0
	     :max 101
	     :onchange "amixer -Mq set Master,0 {}% unmute")

	    (button
	     :class "audio-button"
	     :onclick "sleep 0.1; amixer set Capture toggle"
	     (image
	      :path "${sound.micon}"
	      :image-width 20
	      :image-height 20))
	    (scale
	     :class "audio-scale"
	     :hexpand true
	     :width 80
	     :value "${sound.mvolume}"
	     :tooltip "${sound.mvolume}"
	     :min 0
	     :max 101
	     :onchange "amixer -Mq set Capture,0 {}% unmute")))

(defwidget system-time []
	   (box
	    :hexpand true
	    :halign "end"
	    :class "system-time box"
	     (button
	      :onclick "sleep 0.1; eww open cal --toggle &"
	      (label :text "${formattime(EWW_TIME, '%a, %d %b %T')}")
	      )))

(defwindow cal
	   :monitor 1
	   :geometry (geometry :x "60px"
		               :y "10px"
		               :width "300px"
		               :height "200px"
		               :anchor "bottom right")
	   :stacking "fg"
	   :exclusive "false"
	   :focusable "false"
	   (calendar
	    :width 200
	    :class "calendar-box"
	    :onclick "sleep 0.1; wl-copy {0}/{1}/{2}")
	   )

(defwindow statusbar
	   :monitor 1
	   :geometry (geometry :x "0%"
		               :y "5px"
		               :width "98%"
		               :height "40px"
		               :anchor "bottom center")
	   :stacking "fg"
	   :exclusive "true"
	   :focusable "false"
	   (box :space-evenly false
		:class "statusbar-box"
		(workspaces)
		(active-window)
		(box
		     :class "widgets-box box"
		     :space-evenly false
		     :halign "start"
		     (monitor
		      :monitor-width 6
		      :monitor-text "${round(EWW_CPU.avg, 2)}%"
		      :monitor-icon "./assets/cpu.png")
		     (monitor
		      :monitor-width 6
		      :monitor-text "${round(EWW_RAM.used_mem_perc, 2)}%"
		      :monitor-icon "./assets/ram.png")
		     (monitor
		      :monitor-width 6
		      :monitor-text "${round(EWW_NET.enp4s0.NET_DOWN/1024, 0)}"
		      :monitor-icon "./assets/download.png")
		     (monitor
		      :monitor-width 6
		      :monitor-text "${round(EWW_NET.enp4s0.NET_UP/1024, 0)}"
		      :monitor-icon "./assets/upload.png"))
		(box
		     :class "notifications-box box"
		     :space-evenly false
		     :halign "start"
		     (monitor
		      :monitor-width 2
		      :monitor-text "${mail-important}"
		      :monitor-icon "./assets/mail.png")
		     (monitor
		      :monitor-width 2
		      :monitor-text "${mail-unread}"
		      :monitor-icon "./assets/envelope.png")
		     (monitor
		      :monitor-width 2
		      :monitor-text "${notifications.text}"
		      :monitor-icon "./assets/notification-${notifications.alt}.png"
		      :monitor-click "sleep 0.1; swaync-client -t -sw")
		     (monitor
		      :monitor-width 16
		      :monitor-text `${substring(cal.b, 0, 10)} ${replace(cal.g, "-.*", "") ?: ""}`
		      :monitor-icon `${cal.f == formattime(EWW_TIME, "%Y-%m-%d") ? "./assets/calendar.png" : "./assets/calendar-free.png"}`
		      :monitor-click `sleep 0.1; eww update calEntry="${calEntry + 1}"`
		      :monitor-rclick `sleep 0.1; eww update calEntry="${calEntry - 1 < 0 ? 0 : calEntry - 1}"`)
		     )
		(audio)
		(monitor
		 :monitor-width 0
		 :monitor-class "box"
		 :monitor-text ""
		 :monitor-icon "./assets/tv-${tvStatus}.png"
		 :monitor-click "sleep 0.1; ~/.config/eww/scripts/toggle-tv.sh")
		(system-time)))
