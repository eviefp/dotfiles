{
/*
	// Place your snippets for PureScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
  "Double colon": {
	"prefix": "::",
	"body": "∷"
  },
  "Forall": {
	"prefix": "forall",
	"body": "∀"
  },
  "Then": {
	"prefix": "=>",
	"body": "⇒"
  },
  "Arrow": {
	"prefix": "->",
	"body": "→"
  },
  "ReverseArrow": {
	"prefix": "<-",
	"body": "←"
	},
	"Halogen Module": {
		"prefix": "moduleH",
		"body": [
"module $1",
"	( component",
"	, Query (..)",
"	) where",
"",
"import Control.Monad.Aff.Class (class MonadAff)",
"import Data.Maybe (Maybe(..))",
"import Halogen as H",
"import Halogen.HTML as HH",
"import Halogen.HTML.Events as HE",
"import Halogen.HTML.Properties as HP",
"import Prelude (type (~>), Unit, Void, const, id, pure, unit, (<$))",
"data Query a",
"	= Noop a",
"",
"type State = Unit",
"",
"component",
"	∷ ∀ r m",
"	. MonadAff r m",
"	⇒ H.Component HH.HTML Query State Void m",
"component =",
"	H.component",
"		{ initialState: id",
"		, render",
"		, eval",
"		, receiver: const Nothing",
"		}",
"	where",
"",
"	render ∷ State → H.ComponentHTML Query",
"	render _ = HH.text \"\"",
"",
"	eval ∷ Query ~> H.ComponentDSL State Query Void m",
"	eval = case _ of",
"		Noop next → next <$ pure unit",	
		]
	}
}